loadstring(game:HttpGet('https://raw.githubusercontent.com/GhostPlayer352/UI-Library/refs/heads/main/Ghost%20Gui'))()
game.CoreGui.GhostGui.MainFrame.Title.Text = "Dead Rails"
----

AddContent("TextButton", "Nullfire", [[
loadstring(game:HttpGet("https://raw.githubusercontent.com/InfernusScripts/Null-Fire/main/Loader"))()
]])
 
 
AddContent("TextButton", "End Script | Toraisme", [[
loadstring(game:HttpGet("https://raw.githubusercontent.com/gumanba/Scripts/main/DeadRails"))()
]])
 


AddContent("TextButton", "Npc Lock | GioBolqvi", [[
--dead rails wall hack aimbot.
local Players = game:GetService("Players")
local player = Players.LocalPlayer
player.CameraMode = Enum.CameraMode.Classic
local runService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local camera = workspace.CurrentCamera
 
StarterGui:SetCore("SendNotification", {
    Title = "Code by GioBolqvi", -- dont skid ðŸ™ðŸ’”
    Text = "on Roblox",
    Duration = 3
})
 
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "NPC_Lock_GUI"
screenGui.Parent = game:GetService("CoreGui")
 
local button = Instance.new("TextButton")
button.Name = "NPC Lock: ON/OFF"
button.Size = UDim2.new(0, 150, 0, 50)
button.Position = UDim2.new(0.5, -75, 0.9, -25)
button.BackgroundColor3 = Color3.new(0, 0, 0)
button.TextColor3 = Color3.new(1, 1, 1)
button.Text = "NPC Lock: OFF"
button.Font = Enum.Font.Fantasy
button.TextScaled = true
button.TextSize = 20
button.Parent = screenGui
 
local uicorner = Instance.new("UICorner")
uicorner.CornerRadius = UDim.new(0, 12)
uicorner.Parent = button
 
local dragging = false
local dragInput, dragStart, startPos
 
local function update(input)
    local delta = input.Position - dragStart
    button.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end
 
button.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = button.Position
 
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)
 
button.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)
 
game:GetService("UserInputService").InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        update(input)
    end
end)
 
local npcLock = false
local lastTarget = nil
local toggleLoop
 
local function addPlayerHighlight()
    if player.Character then
        local highlight = player.Character:FindFirstChild("PlayerHighlightESP")
        if not highlight then
            highlight = Instance.new("Highlight")
            highlight.Name = "PlayerHighlightESP"
            highlight.FillColor = Color3.new(1, 1, 1)
            highlight.OutlineColor = Color3.new(1, 1, 1)
            highlight.FillTransparency = 0.5
            highlight.OutlineTransparency = 0
            highlight.Parent = player.Character
        end
    end
end
 
local function removePlayerHighlight()
    if player.Character and player.Character:FindFirstChild("PlayerHighlightESP") then
        player.Character.PlayerHighlightESP:Destroy()
    end
end
 
local function getClosestNPC()
    local closestNPC = nil
    local closestDistance = math.huge
 
    for _, object in ipairs(workspace:GetDescendants()) do
        if object:IsA("Model") then
            local humanoid = object:FindFirstChild("Humanoid") or object:FindFirstChildWhichIsA("Humanoid")
            local hrp = object:FindFirstChild("HumanoidRootPart") or object.PrimaryPart
            if humanoid and hrp and humanoid.Health > 0 and object.Name ~= "Horse" then
                local isPlayer = false
                for _, pl in ipairs(Players:GetPlayers()) do
                    if pl.Character == object then
                        isPlayer = true
                        break
                    end
                end
                if not isPlayer then
                    local distance = (hrp.Position - player.Character.HumanoidRootPart.Position).Magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        closestNPC = object
                    end
                end
            end
        end
    end
 
    return closestNPC
end
 
button.MouseButton1Click:Connect(function()
    npcLock = not npcLock
    if npcLock then
        button.Text = "NPC Lock: ON"
        toggleLoop = runService.RenderStepped:Connect(function()
            local npc = getClosestNPC()
            if npc and npc:FindFirstChild("Humanoid") then
                local npcHumanoid = npc:FindFirstChild("Humanoid")
                if npcHumanoid.Health > 0 then
                    camera.CameraSubject = npcHumanoid
                    lastTarget = npc
                    addPlayerHighlight()
                else
                    StarterGui:SetCore("SendNotification", {
                        Title = "Killed NPC",
                        Text = npc.Name,
                        Duration = 0.4
                    })
                    lastTarget = nil
                    removePlayerHighlight()
                    if player.Character and player.Character:FindFirstChild("Humanoid") then
                        camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
                    end
                end
            else
                if player.Character and player.Character:FindFirstChild("Humanoid") then
                    camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
                end
                lastTarget = nil
                removePlayerHighlight()
            end
        end)
    else
        button.Text = "NPC Lock: OFF"
        if toggleLoop then
            toggleLoop:Disconnect()
            toggleLoop = nil
        end
        removePlayerHighlight()
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
        end
    end
end)
]])
 
  AddContent("TextButton", "Aimbot[idk og owner]", [[
loadstring(game:HttpGet("https://pastebin.com/raw/NNRzb6Zr"))()
]])

TextLabel = AddContent("TextLabel")
TextLabel.Text = "Hitbox| may not work"

AddContent("TextButton", "tap this NOW!", [[
local originalSizes = {}

local function storeOriginalSize(npc)
    local humanoidRootPart = npc:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        originalSizes[npc] = {
            x = humanoidRootPart.Size.X,
            y = humanoidRootPart.Size.Y,
            z = humanoidRootPart.Size.Z
        }
    end
end

game.Workspace.ChildAdded:Connect(function(child)
    if child:FindFirstChild("Humanoid") then --Check if it's an NPC with a Humanoid
        storeOriginalSize(child)
    end
end)

-- Store sizes of existing NPCs on startup
for _, npc in pairs(workspace:GetChildren()) do
    if npc:FindFirstChild("Humanoid") then
        storeOriginalSize(npc)
    end
end
]])
 
 

AddContent("TextButton", "On", [[
local function modifyHitbox(npc)
    local humanoidRootPart = npc:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        local newPart = Instance.new("Part")
        newPart.Parent = humanoidRootPart
        newPart.Name = "ModifiedHitbox"  --Easy identification and cleanup
        newPart.Size = Vector3.new(10, 10, 10)
        newPart.BrickColor = BrickColor.new("Black")
        newPart.Transparency = 0.5  --Approximates semi-transparency
        newPart.CanCollide = true --Maintain collision
        newPart.Anchored = false --Inherit movement from HumanoidRootPart
    end
end


game.Workspace.ChildAdded:Connect(function(child)
    if child:FindFirstChild("Humanoid") then
        modifyHitbox(child)
    end
end)

--Modify existing NPCs on startup
for _, npc in pairs(workspace:GetChildren()) do
    if npc:FindFirstChild("Humanoid") then
        modifyHitbox(npc)
    end
end
]])
AddContent("TextButton", "Off", [[
local originalSizes = require(game.ServerScriptService.OriginalSizeStorage) -- Assuming OriginalSizeStorage.lua is in ServerScriptService


local function restoreOriginalSize(npc)
    local originalSize = originalSizes[npc]
    if originalSize then
        local humanoidRootPart = npc:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            humanoidRootPart:FindFirstChild("ModifiedHitbox"):Destroy() --Remove the modified hitbox
            humanoidRootPart.Size = Vector3.new(originalSize.x, originalSize.y, originalSize.z)
        end
    end
end

--Example usage:  Call this function when you want to restore the original size.  You will need to adapt this to your game's logic.
--  For example, you might call it when the player presses a key or when a certain event occurs.
local function restoreAllSizes()
    for npc, _ in pairs(originalSizes) do
        restoreOriginalSize(npc)
    end
end

--Example call to restore all sizes:
--restoreAllSizes()
]])
 
  TextLabel = AddContent("TextLabel")
TextLabel.Text = "--------------------------"

AddContent("TextButton", "Teleports", [[
loadstring(game:HttpGet("https://raw.githubusercontent.com/OrionX1100/OrionScripts/refs/heads/main/Deadrailsteleports"))()
]])
 
 
